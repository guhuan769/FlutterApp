---
description: 
globs: 
alwaysApply: true
---
# 通用项目规则
- 项目中所有使用的图标,必须先检查如果存在,再进行使用,我不像看见使用了却找不到资源的情况。
- 项目采用MVVM+Clean Architecture架构
- 主要使用Kotlin语言开发，必要时可平滑过渡到Java
- 使用Jetpack组件库（ViewModel, LiveData, Navigation等）
- 使用Coroutines和Flow处理异步操作
- 使用Hilt进行依赖注入
- 采用Material Design 3设计规范
- 遵循命名规范：变量使用camelCase，类使用PascalCase
- 实现树形结构：项目 > 车辆 > 轨迹 (分别对应拍照、相册。具体请参照 项目规则 )
- 严格遵循代码质量标准，使用ktlint进行代码格式检查
- 所有代码都必须严格执行，拒绝 " error: Unresolved reference " 所有文件都必须检查是否报错。然后才能继续写下面的代码。
- 保证所有代码能够正常运行，拒绝找不到库，无法解析的导入依赖
- 确保数据的持久化

# 技术规范
1. **优先封装方法原则**：
   - 所有功能代码应封装在清晰命名的方法中
   - 在实现UI之前，先定义和设计好核心方法
2. **避免代码无引用**：
   - 实现代码审查机制，检测未被引用的代码
   - 使用静态分析工具标记未使用的方法
3. **方法先行原则**：
   - 禁止在没有定义对应方法的情况下直接编写UI代码
   - 采用"方法优先"的开发流程
4. **一个类一个文件**：
   - 严格执行每个类存放在独立文件中
   - 文件名应与类名一致

# 编译检查与代码质量基础规则

## 编译完整性检查
- 每次编辑完成后必须确保代码能够正常编译，无任何未解析引用
- 禁止提交或保存包含编译错误的代码
- 引入新依赖必须立即同步项目，确保Gradle配置生效
- 照片相关功能实现前必须验证相机权限处理逻辑

## 命名冲突预防
- 创建新方法、类或文件前必须检查是否存在同名项
- 方法命名必须遵循模块前缀原则：项目模块方法以project开头，车辆模块方法以vehicle开头，轨迹模块方法以track开头
- 照片相关方法必须包含明确的操作类型，如captureProjectModelPhoto()而非capturePhoto()
- 相册功能实现必须遵循模块隔离原则，项目/车辆/轨迹模块各自维护独立相册

## 引用完整性保障
- 删除或重命名任何元素前，必须先检查其全局引用
- 修改方法签名必须同步更新所有调用点
- 包结构调整必须更新所有import语句
- CameraX API引用必须检查版本兼容性，确保支持最高分辨率拍照
