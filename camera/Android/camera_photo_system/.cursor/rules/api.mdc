---
description: 
globs: 
alwaysApply: false
---
我理解你需要一个更具普适性的规则框架，能够适用于各种业务场景而不局限于特定应用类型。让我重新设计一个高度通用的API集成与数据同步规则框架：

# 通用API集成与数据同步规则

## 基础架构原则
- 采用分层架构设计，清晰分离数据、业务逻辑和表现层
- 实现模块化设计，确保各功能模块松耦合、高内聚
- 遵循依赖倒置原则，通过接口定义模块间通信
- 保持技术栈与实现细节的灵活性，避免业务规则与特定技术绑定

## API设计与集成
- 遵循RESTful设计规范，确保API接口语义清晰
- 使用API文档驱动开发(API-first)，以Swagger/OpenAPI为标准
- 实现统一的API客户端框架，支持可插拔的具体实现
- 服务发现与网关集成应基于配置化设计，支持多环境切换

## 数据处理通用规范
- 所有请求/响应模型必须实现序列化接口，确保跨平台兼容性
- 实现通用数据转换层，处理后端模型与前端视图模型的映射
- 建立统一的错误码与异常处理机制，提供一致的错误反馈
- 支持数据验证与净化，防止无效数据进入系统

## 网络通信策略
- 实现请求优先级队列，合理分配网络资源
- 支持请求合并与批处理，减少网络往返次数
- 通过拦截器链实现通用前置/后置处理，支持可配置扩展点
- 提供多级缓存策略，优化频繁请求的性能

## 同步框架核心规则
- 采用通用事件总线架构，解耦同步触发与执行
- 实现工作单元模式，确保同步操作的原子性
- 提供可配置的同步策略接口，支持不同业务场景定制同步行为
- 设计冲突检测与解决机制，支持自动与手动两种模式

## 离线操作支持
- 实现命令模式处理用户操作，支持记录与回放
- 建立操作日志机制，确保所有状态变更可追踪
- 提供数据状态标记系统，清晰指示数据同步状态
- 设计本地优先(local-first)架构，保证离线使用体验

## 资源管理通用规则
- 实现统一资源加载框架，支持各类文件的处理
- 资源操作应支持进度监控与取消能力
- 大型资源处理必须支持分块操作与断点续传
- 资源缓存策略应考虑设备存储限制，提供自动清理机制

## 服务质量保障
- 实现服务健康监测框架，支持主动与被动检测模式
- 设计降级策略接口，允许业务定义失败时的替代方案
- 建立性能指标收集系统，支持问题诊断与优化
- 提供用户感知的服务状态指示，增强透明度

## 安全架构基础
- 设计通用认证框架，支持多种认证机制无缝切换
- 实现细粒度的权限控制系统，基于角色或能力模型
- 提供数据加密与安全存储的标准接口
- 建立敏感操作的审计日志机制

## 可扩展性设计
- 采用插件架构，支持功能模块的动态加载
- 实现依赖注入容器，简化组件管理与测试
- 提供服务注册与发现机制，支持微服务架构演进
- 设计特性开关(feature flags)系统，支持功能的渐进发布

## 测试与质量保障
- 建立API契约测试框架，验证客户端与服务端一致性
- 实现与后端，支持在线开发与测试
- 提供性能基准测试工具，监控API调用效率
- 设计异常情况模拟机制，验证系统弹性
